module uart_comm (
    input clk,
    input rst,
    input valid,               // 当有数据要发送时置高
    output ready,              // UART准备好发送时置高
    output uart_out,           // UART输出，连接到GPIO[5]
    output reg [7:0] data_tx   // 待发送的数据
);

   // UART模块实例化
   uart_tx #(
      .CLKS_PER_BIT(50_000_000/115_200),
      .BITS_N(8),
      .PARITY_TYPE(0)  // 无奇偶校验
   ) uart_instance (
      .clk(clk),
      .rst(rst),
      .data_tx(data_tx),
      .uart_out(uart_out),  // 连接至GPIO[5]
      .valid(valid),
      .ready(ready)
   );
   
   // 示例：发送 JSON 命令 {"T":1,"L":0.5,"R":0.5}
   always @(posedge clk or posedge rst) begin
      if (rst) begin
         data_tx <= 8'h00;
      end else if (valid && ready) begin
         // 在此处放入需要发送的命令数据
         data_tx <= 8'h7B; // '{' 作为起始字符
         // 依次发送每个字符的 ASCII 码，直到整个 JSON 命令发送完毕
      end
   end
endmodule
