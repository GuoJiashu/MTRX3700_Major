module tb_top_level;

	// Parameters (You can adjust them based on your design needs)
	parameter CLKS_PER_BIT = (50_000_000/115_200);
	parameter BITS_N = 8;
	parameter CLK_PERIOD = 20;  // 50MHz clock period (20ns)

	// Signals
	reg clk_50;
	reg reset;
	reg arduino_input;
	reg ready;
	wire valid;
	wire [BITS_N-1:0] arduino_command;

	// Instantiate the top-level module
	top_level #(
		.CLKS_PER_BIT(CLKS_PER_BIT),
		.BITS_N(BITS_N)
	) uut (
		.clk_50(clk_50),
		.reset(reset),
		.arduino_input(arduino_input),
		.ready(ready),
		.valid(valid),
		.arduino_command(arduino_command)
	);

	// Clock generation
	initial begin
		clk_50 = 0;
		forever #(CLK_PERIOD/2) clk_50 = ~clk_50;  // Toggle clock every half period
	end

	// Stimulus process
	initial begin
		// Initialize inputs
		reset = 1;
		arduino_input = 0;
		ready = 0;

		// Release reset after some time
		#(10*CLK_PERIOD);
		reset = 0;

		// Simulate data transmission
		send_uart_byte(8'b10101010);  // Example: Send 0xAA
		#(1000*CLK_PERIOD);  // Wait for some time

		send_uart_byte(8'b11001100);  // Example: Send 0xCC
		#(1000*CLK_PERIOD);  // Wait for some time

		$finish;
	end

	// Task to send UART byte
	task send_uart_byte(input [BITS_N-1:0] byte);
		integer i;
		begin
			// Start bit (low)
			arduino_input = 0;
			#(CLKS_PER_BIT * CLK_PERIOD);

			// Send each bit (LSB first)
			for (i = 0; i < BITS_N; i = i + 1) begin
				arduino_input = byte[i];
				#(CLKS_PER_BIT * CLK_PERIOD);
			end

			// Stop bit (high)
			arduino_input = 1;
			#(CLKS_PER_BIT * CLK_PERIOD);

			// Assert ready after transmission
			ready = 1;
			#(CLK_PERIOD);  // Assert ready for 1 clock cycle
			ready = 0;
		end
	endtask

	// Monitor to observe the output
	initial begin
		$monitor("Time: %0t | Arduino Command: %b | Valid: %b", $time, arduino_command, valid);
	end

endmodule
